_model: page
---
color: primary
---
title: FreeBSD
---
html: two-columns-page.html
---
key: 6
---
body:

### 1. Enable Automatic Software Updates

One of the most important things to keep your relay secure is to install security updates timely and ideally automatically so you can not forget about it.
Follow the instructions to enable [automatic software updates](../../guard/freebsd/updates/) for your operating system.

### 2. Bootstrap `pkg`

This guide assumes we have already a base installation of FreeBSD running, and only the base system.
That means we do not have any packages installed, or even the `pkg` packages manager itself (there's no `sudo` available - we are running commands as root).

To bootstrap and install `pkg` we should run the following command:

```
# pkg bootstrap
# pkg update -f
```

##### 2.1. Recommended steps to setup `pkg`

To follow upstream updates in a "faster way" we recommend changing the 'quarterly' branch used by `pkg` to its 'latest' branch.

One additional step is to prefer using HTTPS to fetch our packages, and updates - so here we also need an extra package to help us out (ca_root_nss).

Installing the `ca_root_nss` package:

```
# pkg install ca_root_nss
```

We are keeping the original setting used by `pkg` but setting a new one that will override it. So we set up a new directory, and then create a configuration file to override what we need. This configuration file will be `/usr/local/etc/pkg/repos/FreeBSD.conf`.

Creating the new directory:

```
# mkdir -p /usr/local/etc/pkg/repos
```

This is how the new configuration file `/usr/local/etc/pkg/repos/FreeBSD.conf` must look like:

```
FreeBSD: {
  url: pkg+https://pkg.freebsd.org/${ABI}/latest
}
```

After applying all these changes, we update the packages list again and try to check if there's already a new update to apply:

```
# pkg update -f
# pkg upgrade -y -f
```

### 3. Install Tor

You can choose to install the stable version (recommended):

```
# pkg install tor
```

Or install an alpha release:

```
# pkg install tor-devel
```

### 4. Install obfs4proxy

```
# pkg install obfs4proxy-tor
```

### 5. Edit your Tor config file, usually located at `/usr/local/etc/tor` and replace its content with:

```
RunAsDaemon 1
BridgeRelay 1

# Replace "TODO1" with a Tor port of your choice.  This port must be externally
# reachable.  Avoid port 9001 because it's commonly associated with Tor and
# censors may be scanning the Internet for this port.
ORPort TODO1

ServerTransportPlugin obfs4 exec /usr/local/bin/obfs4proxy

# Replace "TODO2" with an obfs4 port of your choice.  This port must be
# externally reachable and must be different from the one specified for ORPort.
# Avoid port 9001 because it's commonly associated with
# Tor and censors may be scanning the Internet for this port.
ServerTransportListenAddr obfs4 0.0.0.0:TODO2

# Local communication port between Tor and obfs4.  Always set this to "auto".
# "Ext" means "extended", not "external".  Don't try to set a specific port
# number, nor listen on 0.0.0.0.
ExtORPort auto

# Replace "<address@email.com>" with your email address so we can contact you if
# there are problems with your bridge.  This is optional but encouraged.
ContactInfo <address@email.com>

# Pick a nickname that you like for your bridge.  This is optional.
Nickname PickANickname

Log notice file /var/log/tor/notices.log
```

Don't forget to change the `ORPort`, `ServerTransportListenAddr`, `ContactInfo`, and `Nickname` options.

* Note that both Tor's OR port and its obfs4 port must be reachable. If your bridge is behind a firewall or NAT, make sure to open both ports. You can use [our reachability test](https://bridges.torproject.org/scan/) to see if your obfs4 port is reachable from the Internet.

* Are you using FreeBSD's firewall with a "default deny" policy? If so, make sure that your obfs4proxy can talk to your Tor process over the loopback interface. Don't forget to whitelist Tor's `ExtORPort`.

### 6. Ensure that the `random_id` sysctl setting is enabled

```
# echo "net.inet.ip.random_id=1" >> /etc/sysctl.conf
# sysctl net.inet.ip.random_id=1
```

### 7. Start the tor daemon and make sure it starts at boot

```
# sysrc tor_setuid=YES
# sysrc tor_enable=YES
# service tor start
```
### 8. Monitor your logs

To confirm your bridge is running with no issues, you should see something like this in `/var/log/tor/notices.log`:

```
[notice] Your Tor server's identity key fingerprint is '<NICKNAME> <FINGERPRINT>'
[notice] Your Tor bridge's hashed identity key fingerprint is '<NICKNAME> <HASHED FINGERPRINT>'
[notice] Registered server transport 'obfs4' at '[::]:46396'
[notice] Tor has successfully opened a circuit. Looks like client functionality is working.
[notice] Bootstrapped 100%: Done
[notice] Now checking whether ORPort <redacted>:3818 is reachable... (this may take up to 20 minutes -- look for log messages indicating success)
[notice] Self-testing indicates your ORPort is reachable from the outside. Excellent. Publishing server descriptor.
```

### 9. Final Notes

If you are having trouble setting up your bridge, have a look at [our help section](../../../getting-help/).
If your bridge is now running, check out the [post-install notes](../post-install/).
---
subtitle: How to deploy an obfs4 bridge on FreeBSD
---
section: Bridge
---
section_id: bridge
